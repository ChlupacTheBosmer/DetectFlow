import openai
from typing import Dict, Any
from openai import OpenAI
from detectflow.handlers.custom_chat_handler import CustomChatHandler


class OpenAIChatHandler:
    def __init__(self, api_key: str):
        """
        Initializes the OpenAI Chat handler with the required API key.

        :param api_key: Your OpenAI API key.
        """
        self.api_key = api_key
        self.client = OpenAI(
            # This is the default and can be omitted
            api_key=self.api_key,
        )

    def query_model(self, prompt: str, **kwargs: Dict[str, Any]) -> str:
        """
        Sends a prompt to the OpenAI API and returns the model's response.

        :param prompt: The prompt to send to the model.
        :param kwargs: Additional arguments to pass to the model (e.g., max_tokens, stop, temperature).
        :return: The text generated by the model.
        """

        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Provide a detailed technical explanation to user."},
                {"role": "user", "content": prompt}
            ],
            **kwargs)
        return response

    def compose_job_status_notification(self, data: Dict, **kwargs: Dict[str, Any]):
        """
        Constructs a custom prompt and generates a response specific to PBS job failures.

        :param data: Dictionary containing data to be included in the prompt. Make sure the keys are informative descriptions of the values.
        :param kwargs: Additional arguments to pass to the model (e.g., max_tokens, stop, temperature).
        :return: Customized email text informing the user of the job status.
        """

        additional_data_str = CustomChatHandler.format_data_for_prompt(data)

        system_prompt = "You are a Python developer with extensive experience in data processing and the management of Portable Batch System (PBS) job scheduling. Your primary role is to analyze the status of PBS jobs, including outputs and error logs, and provide expert consultation to users on understanding and resolving job issues."

        user_prompt = f"Analyze the status of PBS job and if available output and error logs as well as the script running as part of the job, assess the situation, and write an email to the user. The email should summarize the situation, explain what was the error if any, whether job results were generated, and suggest solutions. Also, summarize actions needed from the user to fix the problem and rerun the job. The email should be clear, concise, comprehensive, and perfectly structured. Do not include the subject name nor any signature. Only refer to data and information passed in the prompt such as the error log or job info. Job data to inform your response: {additional_data_str}."

        prompt = f"""{system_prompt}\n{user_prompt}"""

        print(prompt)

        response = self.query_model(prompt, **kwargs)

        return response.choices[0].message.content